# -*- coding: utf-8 -*-
"""heart rate prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bpOaNvY73dg6MMXNjDwiLhLzHqsrGDpt

**PREDICTION OF A HEART DISEASE**

importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""importing the dataset"""

data = pd.read_csv("heart.csv")

"""check if there is any missing values is present or not"""

data.info()

"""there is no missing values therefore we continue forward

Summary of the data
"""

data.describe()

data

"""splitting the data into dependent and independent variables"""

x = data.iloc[:, :-1].values
y = data.iloc[:, -1].values
print(x)

print(y)

"""encoding the categorical variables"""

from sklearn.preprocessing import OneHotEncoder
x=OneHotEncoder().fit_transform(data).toarray()
print(x)

"""Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 1)
print(X_train)
print(X_test)
print(y_train)
print(y_test)

X_test

""" Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 1:] = sc.fit_transform(X_train[:, 1:])
X_test[:, 1:] = sc.transform(X_test[:, 1:])
print(X_train)
print(X_test)

"""Training the Logistic Regression model on the Training set"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

"""Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score,recall_score,roc_auc_score,precision_score,f1_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
acc=accuracy_score(y_test, y_pred)
pre=precision_score(y_test, y_pred)
print("accuracy = ",acc)
print("precision = ",pre)
f1=f1_score(y_test, y_pred)
print("F1 - SCORE =",f1)
roc = roc_auc_score(y_test, y_pred)
print("roc_auc_cure = ",roc)
re=recall_score(y_test, y_pred)
print("recall = ",re)

"""EXPLORATORY DATA ANALYSIS"""

cor=data.corr()
ax=sns.heatmap(cor.corr(),annot=True)

data["Oldpeak"].hist()
plt.show()

plt.figure(figsize=(16,7))
sns.distplot(data[data['HeartDisease']==0]['Age'],kde=False,bins=50)
plt.title('Age of Heart Diseased\n')

plt.figure(figsize=(16,7))
sns.distplot(data[data['HeartDisease']==0]['MaxHR'],kde=False,bins=50)
plt.title('PULSE RATE of Heart Diseased\n')

#occurance of CVD across age
plt.figure(figsize=(15,6))
sns.countplot(x='Age',data = data,hue='ChestPainType')
plt.show()

from plotly.offline import iplot, init_notebook_mode #visualization
import plotly.express as px #visualization
from plotly.subplots import make_subplots #visualization
import plotly.graph_objects as go #visualization

#creating a copy of dataset for the visualization
eda= data.copy()
#change values to make better visualizations
eda['Sex'] = np.where(eda['Sex'] == 'F', 'Female', 'Male')
eda['HeartDisease'] = np.where(eda['HeartDisease'] == 0, 'Normal', 'Heart Disease')
eda['ExerciseAngina'] = np.where(eda['ExerciseAngina'] == 'N', 'No', 'Yes')
eda["ChestPainType"].replace({'TA': 'Typical Angina', 'ATA': 'Atypical Angina', 
                              'NAP': 'Non-Anginal Pain', 'ASY': 'Asymptomatic'}, inplace= True)
eda["ST_Slope"].replace({'Up': 'Upsloping', 'Down': 'Downsloping',}, inplace= True)

#barplot of heart failure by gender 
my_scale = ['rgb(70,81,242)','rgb(255,105,180)']
#histogram with plotly
df = px.data.tips()
fig = px.histogram(eda, x="HeartDisease",
             color='Sex', barmode='group', 
             color_discrete_sequence =my_scale, opacity=0.9,text_auto=True,
             height=450, width = 450)
fig.update_layout(title_text='Heart failure by Sex',title_font_size=16, title_x=0.5,
                  font_family='Bahnschrift SemiBold', 
                  yaxis_title=None, xaxis_title=None)
fig.update_traces(textfont_size=14, textangle=0, textposition="outside", cliponaxis=False,
                 marker_line_width=1,marker_line_color="black")


fig.show()

#relationship between peak exercising(slope) and target.
sns.countplot(data=data,x='ST_Slope',hue='HeartDisease')
plt.title('peak exercising VS Target')

#relationship between peak exercising(slope) and target.
sns.countplot(data=data,x='ChestPainType',hue='HeartDisease')
plt.title('chestpaintype VS Target')

#relationship between peak exercising(slope) and target.
sns.countplot(data=data,x='RestingECG',hue='HeartDisease')
plt.title('peak exercising VS Target')

#relationship between peak exercising(slope) and target.
sns.countplot(data=data,x='ExerciseAngina',hue='HeartDisease')
plt.title('peak exercising VS Target')

import pandas as pd
csv = pd.DataFrame(y_pred, columns=["1st"])
csv.to_csv("pred.csv", index=False)
da=pd.DataFrame(y_test, columns =["1st"])
csv.to_csv("data.csv", index=False)

X_test.shape